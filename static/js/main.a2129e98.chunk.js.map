{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/Searchbox.js","components/ErrorBoudry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","src","alt","CardList","robots","cardsArray","map","user","index","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchfield","searchChange","placeholder","type","onChange","ErrorBoudry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MACnB,OACI,yBAAKC,UAAU,sDAEX,yBAAKC,IAAG,+BAA0BH,EAA1B,WAAuCI,IAAI,WACnD,6BACI,4BAAKL,GACL,2BAAIE,MCMLI,EAXE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACTC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,KAAMO,EAAOI,GAAOX,KAAMC,GAAIM,EAAOI,GAAOV,GAAKC,MAAOK,EAAOI,GAAOT,WAGlG,OACG,6BACMM,ICDEK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC5DJ,EAAMK,WCOJC,EAVE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC3B,OACI,2BAAOC,YAAY,SACnBpB,UAAU,mCACVqB,KAAK,SACLC,SAAUH,KCiBHI,E,kDArBX,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SAEL,wCAGFG,KAAKjB,MAAMK,a,GAlBCc,aCsDXC,G,wDA/CX,aAAc,IAAD,8BACT,gBAcJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAdxC,EAAKZ,MAAM,CACPpB,OAAO,GACP8B,YAAY,IAJP,E,gEAQO,IAAD,OACfG,MAAM,8CAA8CC,MAAK,SAAAC,GACrDA,EAAIC,OACHF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACzB,OAAOqC,Y,+BASlC,IAAD,OACEC,EAAiBd,KAAKJ,MAAMpB,OAAOuC,QAAO,SAAAC,GAC5C,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OAAgC,IAA7BjB,KAAKJ,MAAMpB,OAAO2C,OACV,wBAAI/C,UAAU,MAAd,cAGH,yBAAKA,UAAY,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWmB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQsC,W,GAlCvBZ,cCCnBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.a2129e98.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = ({name,id,email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n            \r\n            <img src={`https://robohash.org/${id}200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n    const cardsArray = robots.map((user,index)=>{\r\n      return  <Card key={index} name={robots[index].name} id={robots[index].id}  email={robots[index].email}/>\r\n    })\r\n\r\n    return(\r\n       <div>\r\n            {cardsArray}\r\n       </div> \r\n    )\r\n}\r\nexport default CardList","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nconst Searchbox =({searchfield,searchChange})=>{\r\n    return (\r\n        <input placeholder='search'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        onChange={searchChange}\r\n        ></input>\r\n    )\r\n}\r\n\r\nexport default Searchbox","import React ,{Component} from 'react'\r\n\r\nclass ErrorBoudry extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n       if(this.state.hasError){\r\n           return (\r\n                <h1>Whoopsie</h1>\r\n           )\r\n       }\r\n       return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoudry","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport Searchbox from '../components/Searchbox'\r\nimport ErrorBoudry from '../components/ErrorBoudry'\r\nimport './App.css'\r\n \r\n\r\nclass  App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchField:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(res => {\r\n            res.json()\r\n            .then(users=>this.setState({robots:users}))\r\n        })\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchField:event.target.value})\r\n            \r\n            \r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1 className='tc'>Loading...</h1>\r\n        }else{\r\n            return (\r\n                <div className = 'tc'>\r\n                    <h1 className='f2'>Robo Friends</h1>\r\n                    <Searchbox searchChange={this.onSearchChange}></Searchbox>\r\n                    <Scroll>\r\n                        <ErrorBoudry>\r\n                        <CardList robots={filteredRobots}></CardList>\r\n                        </ErrorBoudry>\r\n                   \r\n                    </Scroll>\r\n                     \r\n                </div>\r\n               \r\n            )     \r\n        }\r\n        \r\n    }\r\n   \r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons'\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n   <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}